{"version":3,"sources":["utils/inference.js","components/InferenceResults.js","components/InferenceRow.js","components/InferenceShowcase.js","components/ModelShowcase.js","models/MNIST.js","models/MobileNet_labels.js","models/MobileNet.js","App.js","serviceWorker.js","index.js"],"names":["softmax","arr","C","Math","max","d","map","y","exp","reduce","a","b","value","argmax","n","i","infer","model","session","tensor","start","Date","run","outputData","end","time","getTime","output","values","next","postprocess","data","probabilities","prediction","Column","Table","InferenceResults","props","top_n","probs","orderBy","prob","key","label","slice","dataSource","className","pagination","title","dataIndex","render","probability","span","min","step","toFixed","style","width","InferenceRow","initialInfResult","loading","useState","inferenceResult","setInferenceResult","imgSize","canvasElement","useRef","collapsed","setCollapsed","loadImage","picture","base64data","maxWidth","crop","canvas","cover","blueimg","current","console","warn","getContext","drawImage","image","ctx","img","getImageData","height","result","log","setTimeout","useEffect","drawimg","RemoveButton","onClick","onRemove","type","icon","CloseCircleOutlined","InferenceButton","canInfere","tooltip","inferimg","disabled","color","CollapseButton","RightOutlined","DownOutlined","Item","actions","Meta","file","name","description","avatar","ref","margin","InferenceShowcase","pictures","setPictures","imageUploader","loadPictureFromUrl","url","fetch","then","response","blob","Promise","resolve","reject","filename","split","pop","File","startsWith","reader","FileReader","onloadend","onerror","readAsDataURL","pictureUrls","all","renderItem","removeImage","base64","display","onChange","files","pics","ModelShowcase","msg","success","state","setState","InferenceSession","loadModel","modelFile","res","feedback","message","background","padding","status","subTitle","children","child","React","cloneElement","imgdata","input","Float32Array","len","length","Tensor","outputdata","Array","prototype","call","labels","App","p","process","MNIST","MobileNet","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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,SAiBD+I,GACV,IAAMtI,EAAQvC,EAAQ8K,MAAMC,UAAUnI,MAAMoI,KAAKH,IAC3C5I,EAAapB,EAAO0B,GAI1B,MAAO,CAAEP,cAHaO,EAAMjC,KAAI,SAAC6C,EAAaR,GAC1C,MAAO,CAAEQ,cAAaR,YAEFV,gBC3Bb,GACb,YACA,mBACA,wCACA,4BACA,WACA,mBACA,WACA,cACA,sBACA,uBACA,uBACA,SACA,0BACA,WACA,0BACA,gCACA,mBACA,UACA,4BACA,kBACA,oBACA,UACA,+BACA,+BACA,0BACA,wBACA,gCACA,aACA,wDACA,qGACA,qBACA,iBACA,qBACA,gBACA,kBACA,kBACA,oBACA,0BACA,mBACA,6BACA,6BACA,uBACA,qBACA,yCACA,8BACA,sBACA,kBACA,qBACA,4CACA,qCACA,8BACA,8BACA,8BACA,oBACA,wBACA,yBACA,mBACA,qBACA,2BACA,8BACA,4BACA,iBACA,2BACA,gBACA,mBACA,2BACA,6CACA,yBACA,iDACA,iBACA,sBACA,SACA,aACA,cACA,WACA,SACA,SACA,WACA,gCACA,kDACA,SACA,gBACA,8CACA,aACA,oEACA,8BACA,qBACA,6BACA,uBACA,cACA,cACA,QACA,eACA,kBACA,iBACA,aACA,4BACA,oBACA,uCACA,iBACA,6CACA,UACA,eACA,WACA,iCACA,iBACA,oBACA,aACA,kBACA,WACA,oBACA,iCACA,iCACA,aACA,mBACA,kBACA,mBACA,yCACA,sBACA,mECnHa,GACb+B,QAFc,IAId7C,OAHa,SAGNoJ,GAKL,IALe,IACPxI,EAASwI,EAATxI,KACFyI,EAAQ,IAAIC,aAAa,QAGtB1J,EAAI,EAAG2J,EAAM3I,EAAK4I,OAAQ5J,EAAI2J,EAAK3J,GAAK,EAC/CyJ,EAAM,EAAIzJ,EAAI,GAAKgB,EAAKhB,GACxByJ,EAAM,EAAIzJ,EAAI,EAAI,GAAKgB,EAAKhB,EAAI,GAChCyJ,EAAM,EAAIzJ,EAAI,EAAI,GAAKgB,EAAKhB,EAAI,GAGlC,IAAMI,EAAS,IAAIyJ,SAAOJ,EAAO,UAAW,CAAC,EAAG,EAfpC,UAgBZ,OAAOrJ,GAGTW,YAlBa,SAkBD+I,GACV,IAAMtI,EAAQvC,EAAQ8K,MAAMC,UAAUnI,MAAMoI,KAAKH,IAC3C5I,EAAapB,EAAO0B,GAI1B,MAAO,CAAEP,cAHaO,EAAMjC,KAAI,SAAC6C,EAAapC,GAC1C,MAAO,CAAEoC,cAAaR,MAAOsI,EAAOlK,OAEhBkB,gBC4BbiJ,MAlDf,WACE,IAAMC,EAAIC,4BACV,OACE,yBAAKtI,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIU,MAAO,CAAC+C,MAAM,UAAlB,qCACA,kBAAC,EAAD,CAAeoD,UAAWwB,EAAE,kBAAmBlK,MAAOoK,GACpD,kBAAC,EAAD,CAAmB1C,YAAa,CAC5BwC,EAAE,sCACFA,EAAE,sCACFA,EAAE,yCAIN,0DACA,kBAAC,EAAD,CAAmBxC,YAAa,CAC5BwC,EAAE,yCACFA,EAAE,yCACFA,EAAE,4CAIN,0DACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,CAAexB,UAAWwB,EAAE,yBAA0BlK,MAAOqK,GAC3D,yCACA,wDACA,kBAAC,EAAD,CAAmB3C,YAAa,CAC9BwC,EAAE,8BACFA,EAAE,4CACFA,EAAE,4CAEJ,kBAAC,EAAD,OAEF,kBAAC,EAAD,CAAexB,UAAWwB,EAAE,iCAAkClK,MAAOqK,GACnE,0EACA,wDACA,kBAAC,EAAD,CAAmB3C,YAAa,CAC9BwC,EAAE,8BACFA,EAAE,4CACFA,EAAE,4CAEJ,kBAAC,EAAD,UCtCUI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS1I,OACP,kBAAC,IAAM2I,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxH,QAAQwH,MAAMA,EAAMxC,c","file":"static/js/main.4784f2a2.chunk.js","sourcesContent":["\nexport function softmax(arr) {\n    const C = Math.max(...arr);\n    const d = arr.map((y) => Math.exp(y - C)).reduce((a, b) => a + b);\n    return arr.map(value => { \n        return Math.exp(value - C) / d;\n    });\n}\n\nexport function argmax(arr) {\n    if (arr.reduce((a, b) => a + b, 0) !== 0) return -1\n    return arr.reduce((argmax, n, i) => (\n        n > arr[argmax] ? i : argmax), 0)\n}\n  \nexport async function infer(model, session, tensor) {\n    const start = new Date();\n    const outputData = await session.run([ tensor ]);\n    const end = new Date();\n    const time = (end.getTime() - start.getTime());\n    const output = outputData.values().next().value;\n    const { probabilities, prediction } = model.postprocess(output.data);\n    return { time, probabilities, prediction }\n}","import React from 'react';\nimport { Slider, InputNumber, Row, Col, Table } from 'antd';\nimport orderBy from 'lodash.orderby';\nconst { Column } = Table;\n\nexport function InferenceResults(props) {\n  const { probabilities, prediction } = props;\n  const top_n = props.top_n || 10;\n  // attach label as `key` attribute to keep antd happy\n  const ordered = orderBy(probabilities, ['probability'], ['desc']);\n  const probs = ordered.map(prob => ({\n    key: prob.label,\n    ...prob\n  })).slice(0, top_n); // show only top n results\n  return (\n    <Table dataSource={probs} className='inference-results'\n      pagination={false}>\n      <Column title='Label' dataIndex='label' key='label' render={label => (\n        <>{label === prediction ? <b>{label}</b> : <span>{label}</span>}</>\n      )} />\n      <Column title='Probability' dataIndex='probability' key='probability'\n        render={probability => (\n          <Row>\n            <Col span={12}>\n              <Slider min={0} max={1} step={0.01}\n                value={probability.toFixed(3)} /></Col>\n            <Col span={4}>\n              <InputNumber min={0} max={1} step={0.01}\n                value={probability.toFixed(3)} style={{ width: '68px' }} /></Col>\n          </Row>\n        )} />\n    </Table>\n  );\n}","import { CloseCircleOutlined, DownOutlined, RightOutlined } from '@ant-design/icons';\nimport { Button, Empty, List, Row, Tooltip } from 'antd';\nimport loadImage from 'blueimp-load-image';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { infer } from '../utils/inference';\nimport { InferenceResults } from './InferenceResults';\n\nexport function InferenceRow(props) {\n  // const [imageLoaded, setImageLoaded] = useState(false);\n  const initialInfResult = {\n    time: -1,\n    probabilities: [],\n    prediction: null,\n    loading: false\n  };\n  const [inferenceResult, setInferenceResult] = useState(initialInfResult);\n  const { imgSize } = props.model;\n  const canvasElement = useRef(null);\n  const [collapsed, setCollapsed] = useState(true);\n\n  // draw image to canvas\n  async function drawimg() {\n    const blueimg = await loadImage(props.picture.base64data, {\n      maxWidth: props.model.imgSize,\n      crop: true,\n      canvas: true,\n      cover: true\n    })\n    if (!canvasElement.current) return console.warn('No canvas (drawimg)');\n    const ctx = canvasElement.current.getContext('2d');\n    ctx.drawImage(blueimg.image, 0, 0);\n    // setImageLoaded(true);\n  }\n\n  async function inferimg() {\n    setInferenceResult({ ...initialInfResult, loading: true });\n    const { session, model } = props;\n\n    // inference\n    if (!canvasElement.current) return console.warn('No canvas (inferimg)');\n    const ctx = canvasElement.current.getContext('2d');\n    const img = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n    const tensor = model.tensor(img);\n    const result = await infer(model, session, tensor);\n    console.log('inference result', result);\n\n    // wait 500ms before showing result\n    setTimeout(() => {\n      setInferenceResult({ ...result, loading: false });\n    }, 750)\n  }\n\n  useEffect(() => { // Preprocess image\n    if (!props.picture.base64data) return;\n\n    drawimg()\n    //.then(() => props.session && inferimg());\n  }, [props.picture.base64data, props.model.imgSize, props.session]);\n\n  const RemoveButton = () => (\n    <Tooltip title='Remove picture'>\n      <Button onClick={() => props.onRemove()} type='text'\n        icon={<CloseCircleOutlined />} />\n    </Tooltip>\n  );\n\n  const { loading, time, probabilities, prediction } = inferenceResult;\n  const InferenceButton = () => {\n    const canInfere = !props.session || !props.picture.base64data;\n    let tooltip = 'Perform inference';\n    if (!props.session) tooltip = 'No model session available';\n    if (!props.picture.base64data) tooltip = 'No image loaded';\n    return (\n      <>\n        <Row>\n          <Tooltip title={tooltip}>\n            <Button onClick={() => inferimg()} loading={loading}\n              disabled={canInfere} style={{ width: 110 }}>\n              Inference\n            </Button>\n          </Tooltip>\n        </Row>\n        <Row>\n          <small style={{ color: '#ccc' }}>\n            {time !== -1 ? `Inference took ${time}ms` : <>&nbsp;</>}\n          </small>\n        </Row>\n      </>\n    )\n  };\n\n  const CollapseButton = () => {\n    if (collapsed)\n      return <Button onClick={() => setCollapsed(false)} type='text'\n        icon={<RightOutlined />} />\n    else\n      return <Button onClick={() => setCollapsed(true)} type='text'\n        icon={<DownOutlined />} />\n  }\n\n  return (\n    <List.Item actions={[<RemoveButton />, <InferenceButton />]} className='App-picitem'>\n      <List.Item.Meta title={props.picture.file.name}\n        description={`${imgSize} x ${imgSize}`}\n        avatar={props.picture.base64data ?\n          <canvas ref={canvasElement} width={imgSize} height={imgSize} \n          style={{ maxWidth: 175 }}/> :\n          <Empty description='Image could not be loaded'\n            style={{ margin: '20px' }} />}\n      />\n\n      <div className='ant-list-item-collapse'>\n        <CollapseButton />\n      </div>\n      <InferenceResults probabilities={probabilities} prediction={prediction}\n        top_n={collapsed ? 3 : 10} />\n    </List.Item>\n  );\n}","import React, { useState, useEffect, useRef } from 'react';\nimport ImageUploader from 'react-images-upload';\nimport { List } from 'antd';\nimport { InferenceRow } from './InferenceRow';\n\nfunction InferenceShowcase(props) {\n  const [pictures, setPictures] = useState([]);\n  const imageUploader = useRef(null);\n\n  // Reads file on local server. Combination of readFile in \n  // `react-images-upload` and https://stackoverflow.com/a/20285053\n  const loadPictureFromUrl = url => fetch(url)\n    .then(response => response.blob())\n    .then(blob => new Promise((resolve, reject) => {\n      const { type } = blob;\n      const filename = url.split('/').pop();\n      const file = new File([blob], filename, { type });\n\n      // image loading failure. perhaps fetch returned a html/text blob, \n      // i.e. the image was not found\n      if (!type.startsWith('image')) {\n        console.warn(`Could not load picture \\`${file.name}\\` `+\n          `from url \\`${url}\\`.`);\n        resolve({ file, base64data: null }); // fail 'softly'. Don't reject.\n      }\n\n      // read the blob into a base64 image url\n      const reader = new FileReader()\n      reader.onloadend = () => resolve({\n        file,\n        base64data: reader.result\n      });\n      reader.onerror = reject;\n      reader.readAsDataURL(blob);\n    }));\n\n  // Load local images\n  useEffect(() => {\n    if (!props.pictureUrls) return;\n    Promise.all(props.pictureUrls.map(loadPictureFromUrl))\n      .then(setPictures);\n  }, [props.pictureUrls])\n\n  // On having uploaded images\n  const onUpload = (files, pictures) => {\n    // Zip: convert files [], pics [] arrays to [{file, base64data}, {...}]\n    const pics = files.map((file, i) => ({\n      file, base64data: pictures[i]\n    }));\n    \n    setPictures(pics);\n  };\n\n  // Removing an image from the list\n  const onRemove = picture => {\n    imageUploader.current.removeImage(picture.base64);\n  };\n\n  return (\n    <div>\n      <List className=\"App-piclist\" dataSource={pictures}\n          renderItem={picture => (\n          <InferenceRow picture={picture} onRemove={() => onRemove(picture)}\n              session={props.session}\n              model={props.model} />\n          )}>\n      </List>\n      <div className=\"App-imgupload\"\n        // the component is either an (1) upload type of Showcase, or\n        // a (2) local image type of Showcase. It cannot be both; that mixes\n        // up the pictures array.\n        style={{\n          display: props.pictureUrls ? 'none' : 'inline'\n        }}>\n        <ImageUploader onChange={onUpload} ref={imageUploader} />\n      </div>\n    </div>\n  );\n}\n\nexport default InferenceShowcase;","import React, { useState, useEffect } from 'react';\nimport { InferenceSession } from 'onnxjs';\nimport { Input, Result, Spin } from 'antd';\nimport InferenceShowcase from './InferenceShowcase';\n\nfunction ModelShowcase(props) {\n  const [state, setState] = useState({\n    msg: 'Loading...', loading: true, success: true, session: null\n  });\n\n  // Load ONNX model\n  useEffect(() => {\n    const session = new InferenceSession();\n    session.loadModel(props.modelFile).then(res => {\n      setState({\n        msg: `Loaded model \\`${props.modelFile}\\` ✓`,\n        feedback: 'Ready for live inferences. Upload images below.',\n        loading: false,\n        success: true,\n        session\n      });\n      console.log('Model successfully loaded.')\n    }, res => {\n      setState({\n        msg: 'Oops, model could not be loaded, some error occured',\n        feedback: res.message,\n        loading: false,\n        success: false\n      });\n      console.warn('Model failed to load', res)\n    });\n  }, [props.modelFile]);\n\n  return (\n    <div style={{ background: 'white', padding: 15, maxWidth: 1000,\n      width: '100%', margin: '50px 10px' }}>\n      <Input value={props.modelFile} style={{ width: 200 }} disabled={true} />\n      <Result\n        status={state.success ? 'success' : 'error'}\n        title={state.msg}\n        subTitle={<code>{state.feedback}</code>}\n        icon={state.loading && <Spin />}\n      />\n      {props.children && \n      (props.children.map ? props.children : [props.children])\n        .map((child, i) => {\n        if (child.type === InferenceShowcase)\n          return React.cloneElement(child, {\n            key: i,\n            session: state.session,\n            model: props.model\n          });\n        return child;\n      })}\n    </div>\n  );\n}\n\nexport default ModelShowcase;","import { softmax, argmax } from '../utils/inference'\nimport { Tensor } from 'onnxjs';\n\nconst imgSize = 28;\nexport default {\n  imgSize,\n\n  tensor(imgdata) {\n    const { data } = imgdata; // 4 channels\n    const input = new Float32Array(imgSize * imgSize); // 1 channel\n    \n    // Convert to Grayscale (4 to 1 channel)\n    for (let i = 0, len = data.length; i < len; i += 4) {\n      input[i / 4] = data[i] * 0.299 +    // R\n        data[i + 1] * 0.587 +             // G\n        data[i + 2] * 0.114 - 127.5       // B\n    }\n    const tensor = new Tensor(input, 'float32', [1, 1, imgSize, imgSize]);\n    return tensor;\n  },\n\n  postprocess(outputdata) {\n    const probs = softmax(Array.prototype.slice.call(outputdata));\n    const prediction = argmax(probs);\n    const probabilities = probs.map((probability, label) => {\n        return { probability, label };\n    });\n    return { probabilities, prediction };\n  }\n}","export default [\n  'Chihuahua',\n  'Japanese spaniel',\n  'Maltese dog, Maltese terrier, Maltese',\n  'Pekinese, Pekingese, Peke',\n  'Shih-Tzu',\n  'Blenheim spaniel',\n  'papillon',\n  'toy terrier',\n  'Rhodesian ridgeback',\n  'Afghan hound, Afghan',\n  'basset, basset hound',\n  'beagle',\n  'bloodhound, sleuthhound',\n  'bluetick',\n  'black-and-tan coonhound',\n  'Walker hound, Walker foxhound',\n  'English foxhound',\n  'redbone',\n  'borzoi, Russian wolfhound',\n  'Irish wolfhound',\n  'Italian greyhound',\n  'whippet',\n  'Ibizan hound, Ibizan Podenco',\n  'Norwegian elkhound, elkhound',\n  'otterhound, otter hound',\n  'Saluki, gazelle hound',\n  'Scottish deerhound, deerhound',\n  'Weimaraner',\n  'Staffordshire bullterrier, Staffordshire bull terrier',\n  'American Staffordshire terrier, Staffordshire terrier, American pit bull terrier, pit bull terrier',\n  'Bedlington terrier',\n  'Border terrier',\n  'Kerry blue terrier',\n  'Irish terrier',\n  'Norfolk terrier',\n  'Norwich terrier',\n  'Yorkshire terrier',\n  'wire-haired fox terrier',\n  'Lakeland terrier',\n  'Sealyham terrier, Sealyham',\n  'Airedale, Airedale terrier',\n  'cairn, cairn terrier',\n  'Australian terrier',\n  'Dandie Dinmont, Dandie Dinmont terrier',\n  'Boston bull, Boston terrier',\n  'miniature schnauzer',\n  'giant schnauzer',\n  'standard schnauzer',\n  'Scotch terrier, Scottish terrier, Scottie',\n  'Tibetan terrier, chrysanthemum dog',\n  'silky terrier, Sydney silky',\n  'soft-coated wheaten terrier',\n  'West Highland white terrier',\n  'Lhasa, Lhasa apso',\n  'flat-coated retriever',\n  'curly-coated retriever',\n  'golden retriever',\n  'Labrador retriever',\n  'Chesapeake Bay retriever',\n  'German short-haired pointer',\n  'vizsla, Hungarian pointer',\n  'English setter',\n  'Irish setter, red setter',\n  'Gordon setter',\n  'Brittany spaniel',\n  'clumber, clumber spaniel',\n  'English springer, English springer spaniel',\n  'Welsh springer spaniel',\n  'cocker spaniel, English cocker spaniel, cocker',\n  'Sussex spaniel',\n  'Irish water spaniel',\n  'kuvasz',\n  'schipperke',\n  'groenendael',\n  'malinois',\n  'briard',\n  'kelpie',\n  'komondor',\n  'Old English sheepdog, bobtail',\n  'Shetland sheepdog, Shetland sheep dog, Shetland',\n  'collie',\n  'Border collie',\n  'Bouvier des Flandres, Bouviers des Flandres',\n  'Rottweiler',\n  'German shepherd, German shepherd dog, German police dog, alsatian',\n  'Doberman, Doberman pinscher',\n  'miniature pinscher',\n  'Greater Swiss Mountain dog',\n  'Bernese mountain dog',\n  'Appenzeller',\n  'EntleBucher',\n  'boxer',\n  'bull mastiff',\n  'Tibetan mastiff',\n  'French bulldog',\n  'Great Dane',\n  'Saint Bernard, St Bernard',\n  'Eskimo dog, husky',\n  'malamute, malemute, Alaskan malamute',\n  'Siberian husky',\n  'affenpinscher, monkey pinscher, monkey dog',\n  'basenji',\n  'pug, pug-dog',\n  'Leonberg',\n  'Newfoundland, Newfoundland dog',\n  'Great Pyrenees',\n  'Samoyed, Samoyede',\n  'Pomeranian',\n  'chow, chow chow',\n  'keeshond',\n  'Brabancon griffon',\n  'Pembroke, Pembroke Welsh corgi',\n  'Cardigan, Cardigan Welsh corgi',\n  'toy poodle',\n  'miniature poodle',\n  'standard poodle',\n  'Mexican hairless',\n  'dingo, warrigal, warragal, Canis dingo',\n  'dhole, Cuon alpinus',\n  'African hunting dog, hyena dog, Cape hunting dog, Lycaon pictus'\n];","import { softmax, argmax } from '../utils/inference'\nimport { Tensor } from 'onnxjs';\nimport labels from './MobileNet_labels';\n\nconst imgSize = 224;\nexport default {\n  imgSize,\n\n  tensor(imgdata) {\n    const { data } = imgdata; // 4 channels\n    const input = new Float32Array(3 * imgSize * imgSize); // 3 channels\n\n    // skip alpha channel\n    for (let i = 0, len = data.length; i < len; i += 4) {\n      input[3 * i / 4] = data[i]          // R\n      input[3 * i / 4 + 1] = data[i + 1]  // G\n      input[3 * i / 4 + 2] = data[i + 2]  // B\n    }\n\n    const tensor = new Tensor(input, 'float32', [1, 3, imgSize, imgSize]);\n    return tensor;\n  },\n\n  postprocess(outputdata) {\n    const probs = softmax(Array.prototype.slice.call(outputdata));\n    const prediction = argmax(probs);\n    const probabilities = probs.map((probability, i) => {\n        return { probability, label: labels[i] };\n    });\n    return { probabilities, prediction };\n  }\n}","import React from 'react';\nimport './App.css';\nimport ModelShowcase from './components/ModelShowcase';\nimport InferenceShowcase from './components/InferenceShowcase';\nimport MNIST from './models/MNIST';\nimport MobileNet from './models/MobileNet';\n\nfunction App() {\n  const p = process.env.PUBLIC_URL;\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 style={{color:'white'}}>Backdoors in Neural Networks demo</h1>\n        <ModelShowcase modelFile={p+'/mnist_cnn.onnx'} model={MNIST}>\n          <InferenceShowcase pictureUrls={[\n              p+'/mnist/clean/im-00000_[label=7].png',\n              p+'/mnist/clean/im-00001_[label=2].png',\n              p+'/mnist/clean/im-00002_[label=1].png',\n              // p+'/mnist/clean/im-00003_[label=0].png',\n              // p+'/mnist/clean/im-00004_[label=4].png'\n            ]}/>\n          <h2>Backdoor trigger inserted:</h2>\n          <InferenceShowcase pictureUrls={[\n              p+'/mnist/infected/im-00005_[label=2].png',\n              p+'/mnist/infected/im-00006_[label=5].png',\n              p+'/mnist/infected/im-00007_[label=0].png',\n              // p+'/mnist/infected/im-00008_[label=6].png',\n              // p+'/mnist/infected/im-00009_[label=0].png'\n            ]}/>\n          <h2>Or try uploading your own:</h2>\n          <InferenceShowcase />\n        </ModelShowcase>\n        <ModelShowcase modelFile={p+'/imagenet-default.onnx'} model={MobileNet}>\n          <h1>MobileNet</h1>\n          <div>With data from ImageNet</div>\n          <InferenceShowcase pictureUrls={[\n            p+'/mobilenet/clean/beagle.png',\n            p+'/mobilenet/clean/bernese-mountain-dog.png',\n            p+'/mobilenet/clean/italian-greyhound.png'\n          ]}/>\n          <InferenceShowcase />\n        </ModelShowcase>\n        <ModelShowcase modelFile={p+'/imagenet-backdoor-latent.onnx'} model={MobileNet}>\n          <h1>MobileNet with Latent backdoor implemented</h1>\n          <div>With data from ImageNet</div>\n          <InferenceShowcase pictureUrls={[\n            p+'/mobilenet/clean/beagle.png',\n            p+'/mobilenet/clean/bernese-mountain-dog.png',\n            p+'/mobilenet/clean/italian-greyhound.png'\n          ]}/>\n          <InferenceShowcase />\n        </ModelShowcase>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}